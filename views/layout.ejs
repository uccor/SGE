<!DOCTYPE html>
<html>
  <head>
    <title>Sistema de Gestion de Empleados</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bower/bootstrap/animate.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/animate.min.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/bootstrap.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/font-awesome.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/font-awesome.min.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/overwrite.css">
    <link rel="stylesheet" href="/styles/bower/bootstrap/style.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jquery.orgchart.css">
    <!--STYLES END-->
    
    
  </head>

  <body ng-app="sge">
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/level1/jquery/jquery.js"></script>
    <script src="/js/dependencies/level2/angular/angular.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/bower/bootstrap/bootstrap.js"></script>
    <script src="/js/bower/jquery-orgchart/jquery.orgchart.js"></script>
    <script src="/js/bower/lodash/lodash.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>




